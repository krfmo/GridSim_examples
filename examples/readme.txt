
/**
 * Last update: November 2010
 */

This directory contains examples on how to use the GridSim toolkit. The classes
have been organised in packages to make it easier for you to use this directory 
as a source folder in any development interface such as Eclipse. If you want
to compile and run the examples via command line proceed as follows.

To compile an example source code (make sure you are in the examples directory):
 In Unix/Linux: javac -cp $GRIDSIM/jars/gridsim.jar:. path/to/example/MainClass.java
 In Windows:    javac -cp %GRIDSIM%\jars\gridsim.jar;. path\to\example\MainClass.java

where $GRIDSIM or %GRIDSIM% is the location of the gridsim toolkit package.

To run the class file (in the examples directory):
 In Unix/Linux: java -cp $GRIDSIM/jars/gridsim.jar:. MainClass > file.txt
 In Windows:    java -cp %GRIDSIM%\jars\gridsim.jar;. MainClass > file.txt

The above command means run the program and output the results into a file
named "file.txt" rather than into screen or standard output. To prevent from 
overwriting an existing file, I renamed "file.txt" into "output.txt"
NOTE: When you open "output.txt" file, it tells you that grid user entities
      sending Gridlets to a selected grid resource.

When running an example file, it will produce some files, including:

    GridSim_stat.txt -> created by the GridSim version 2.2 onwards
        during GridSim.init() to create GridStatistics object for statistical 
        purposes. 

    sim_trace -> created by the SimJava2 package (lower-level) to trace every
        event (performed by SimJava and GridSim) during the simulation.
        We don't need to worry about this file as it is not important to 
        our examples.

    sim_report -> created by the SimJava2 package (lower-level) of GridSim.
        This is a simulation report that contains general information about
        running this experiment. We don't need to worry about this file.

NOTE: sim_trace, sim_report and all *.csv files will be overwritten if running
      a new experiment. Details about specific files generated by each example
      are given in the readme.txt file included in the example.


A SUMMARY OF THE EXAMPLES:
      
Here are the summary of what each example does:

gridsim/example01: 
	shows how to create one Grid resource with three machines.

gridsim/example02: 
	shows how to create one or more Grid users. A Grid user
	contains one or more Gridlets. Therefore, this example also shows
	how to create Gridlets with and without using GridSimRandom class.

gridsim/example03: 
	shows how two GridSim entities interact with each other.

gridsim/example04: 
	shows how a grid user submits its Gridlets or tasks to one grid
	resource entity.

gridsim/example05: 
	shows how a grid user submits its Gridlets or tasks to many grid
	resource entities.

gridsim/example06: 
	shows how one or more grid user submits its Gridlets or tasks to
	many grid resource entities.

gridsim/example07: 
	shows how to migrate Gridlets and other stuff such as
	cancel/pause/resume.

gridsim/example08: 
	shows how to make a new and simple grid resource scheduler.

gridsim/example09:
	shows how to make new GridResource and GridInformationService entities.

gridsim/example10: 
	shows how to use Advanced Reservation functionalities.

gridsim/regionalGIS: 
	shows how to create multiple regional GridInformationService
	(GIS) entities in a network topology.

auction: 
	shows few examples how to use the auction extension of GridSim.

dataGrid: 
	shows few examples how to use the datagrid extension of GridSim.

network: 
	shows few examples how to use the network extension of GridSim.

ResFailure: 
	shows how to use the resource failures of GridSim.

WorkloadTrace: 
	shows few examples how to use workload traces from a file in GridSim.
	
parallel:
	Illustrates how to model clusters/supercomputers that process 
	parallel jobs. To run most examples, you will need to inform the
	path to a workload file that contains the information on the jobs
	submitted to the cluster. For example, in order to run the EASY 
	backfilling example on Linux, you should use:
	
	java -cp $GRIDSIM/jars/gridsim.jar:. \
			parallel.agressive.ExampleEASY01 parallel/sdsc_blue_01.txt 

parallel/util:
	shows how to use two different workload models for the parallel jobs in GridSim.
	These workloads are as follows:
	1. Lublin model: workload for supercomputers
	2. DAS2 model: workload for multi-clusters

fta:
	shows how to use the Failure Trace Archive (FTA) for the simulation of resource failure.
	The provided packages read the tabbed version of the failure traces and generate 
	a list of events that show the availability/unavailability pattern for each machine 
	in a grid resource.	
	see the FTA web site for more information about the traces at: http://fta.inria.fr.
	to run the example, you should use:

	java -cp $GRIDSIM/jars/gridsim.jar:. fta.FTAExample01 \
    			$GRIDSIM/examples/fta/workload_bot.txt  $GRIDSIM/examples/fta/fta_tab
	
NOTE: Detailed explanations are provided in the source file(s).
